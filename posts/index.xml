<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 我的个人博客</title>
        <link>https://shilongshen.github.io/posts/</link>
        <description>All Posts | 我的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 04 Feb 2021 09:17:30 &#43;0800</lastBuildDate><atom:link href="https://shilongshen.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>回溯算法</title>
    <link>https://shilongshen.github.io/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
    <pubDate>Thu, 04 Feb 2021 09:17:30 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[参考
 「回溯算法」与「深度优先遍历」都有「不撞南墙不回头」的意思。我个人的理解是：「回溯算法」强调了「深度优先遍历」思想的用途，用一个 不断变化 的变量，在尝试各种可能的过程中，搜索需要的结果。强调了 回退 操作对于搜索的合理性。
 递归之后需要做和递归之前相同的逆向操作   问题1 给定一个 没有重复 数字的序列，返回其所有可能的全排列。
我们尝试在纸上写 333 个数字、444 个数字、555 个数字的全排列，相信不难找到这样的方法。以数组 [1, 2, 3] 的全排列为例。
先写以 111 开头的全排列，它们是：[1, 2, 3], [1, 3, 2]，即 1 + [2, 3] 的全排列（注意：递归结构体现在这里）； 再写以 222 开头的全排列，它们是：[2, 1, 3], [2, 3, 1]，即 2 + [1, 3] 的全排列； 最后写以 333 开头的全排列，它们是：[3, 1, 2], [3, 2, 1]，即 3 + [1, 2] 的全排列。  总结搜索的方法：按顺序枚举每一位可能出现的情况，已经选择的数字在 当前 要选择的数字中不能出现。按照这种策略搜索就能够做到 不重不漏。这样的思路，可以用一个树形结构表示。
  每一个结点表示了求解全排列问题的不同的阶段，这些阶段通过变量的「不同的值」体现，这些变量的不同的值，称之为「状态」； 使用深度优先遍历有「回头」的过程，在「回头」以后， 状态变量需要设置成为和先前一样 ，因此在回到上一层结点的过程中，需要撤销上一次的选择，这个操作称之为「状态重置」；]]></description>
</item><item>
    <title>Redis</title>
    <link>https://shilongshen.github.io/redis/</link>
    <pubDate>Mon, 01 Feb 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/redis/</guid>
    <description><![CDATA[NoSQL(Not Only SQL)，泛指非关系型数据库用于解决大规模数据存储。这些类型的数据存储不需要固定的模式，无需多余的操作就可以横向扩展。
优点：
 易拓展;数据之间没有关系。 大数据量高性能 ；NoSQL数据库具有非常高的读写性能，在大数据量下同样表现优秀 多样灵活的数据模型 ； NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式  RDBMS(关系型数据库) vs. NoSQL
传统的ACID:
 A: （Atomicity）原子性 C:（Consistency）一致性 I：（Isolation）独立性 D:（Durability）持久性  CAP：
 C：（Consistency）强一致性 A：（Availability）高可用性 P:（Partition tolerance） 分区容错性  CAP的3进2：
CAP的核心理论是：一个分布式系统不可能同时很好的满足一致性、可用性和分区容错性，最多只能较好的满足其中的两个。
 CA:单点集群，满足一致性，可用性的系统，通常在拓展性上不太强大&ndash;&gt;传统Oracle数据库 CP:满足一致性，分区容错性的系统，通常性能不是特别高&ndash;&gt;Redis AP:满足可用性，分区容错性的系统，通常对一直性要求低一些  分布式 VS 集群
 分布式：不同的多台服务器上部署不同的服务模块他们之间通过RPC/Rmi之间通信和调用，对外提供服务和组内协作。 集群：不同的多台服务器上部署相同的服务模块，通过分布式调度软件j进行统一的调度，对外提供服务和访问。  票】、4]]></description>
</item><item>
    <title>链表的复制</title>
    <link>https://shilongshen.github.io/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</link>
    <pubDate>Thu, 28 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</guid>
    <description><![CDATA[在这里，复制的意思是指 深拷贝（Deep Copy），类似我们常用的“复制粘贴”，事实上，与此对应的还有 浅拷贝，它们的区别是：
浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象  1.普通单向链表的定义
1 2 3 4 5 6 7 8 9 10  // Definition for a Node. class Node { int val; Node next; public Node(int val) { this.val = val; this.next = null; } }   给定链表的头结点head，复制链表需要遍历链表，每一轮建立新节点+构建前驱结点pre和当前结点node的引用指向即可
1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution{ public Node copy(Node head){ Node cur=head; Node dum=new Node(0);//随意初始化一个结点  Node pre=dum; while(cur!]]></description>
</item><item>
    <title>广度优先问题问题</title>
    <link>https://shilongshen.github.io/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</link>
    <pubDate>Mon, 25 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[机器人的运动范围 ### 解题思路
采用广度优先搜索的方式
广度优先通常采用队列的方式，以一种平铺的方式进行计算
移动方向：我们可以只定义向下和向右进行移动
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  class Solution { public int movingCount(int m, int n, int k) { Deque&lt;int[]&gt; deque = new ArrayDeque&lt;&gt;();//定义一个队列，由于添加删除状态  int[] dx = {1, 0};//右移一位  int[] dy = {0, 1};//下移一位  boolean[][] vis = new boolean[m][n];//定义一个boolean二维数组用于确定该坐标是否被添加  vis[0][0] = true;//坐标[0][0]一定会被使用的，因此将其初始化为true  deque.]]></description>
</item><item>
    <title>01背包问题</title>
    <link>https://shilongshen.github.io/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
    <pubDate>Mon, 11 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[n件物品，它们装入背包所占的容量分别为w1、w2……wn;它们所拥有的价值分别为p1、p2 ……p	n； 有一个总容量为C的背包；
在装满背包的情况下，如何使得包内的总价值最大？
该问题的特点是：每个物品仅有一个，可以选择放或者不放，也就是说每个物品只能使用一次。
首先我们定义一个变量$B(i,j)$表示当背包容量为j，前i个物品（第1个到第i个）的情况下包内的最大价值。
即有i个物品，背包的容量为j，此时的包内的最大价值。
我们对每一件物品进行编号，可以列出以下表格：
行表示背包的容量，列表时背包的编号；为了便于操作，我们将0也加入了表格之中。
现在来分析$B(i,j)$的情况，首先明确一点，为了求出$B(i,j)$，我们可以利用之前的状态。 $$ B(i,j)=\left{ \begin{array}{lcl} B(i-1,j) &amp;if &amp;w[i]&gt;j \
max{ [B(i-1,j)]; [B(i-1,j-w(i))+p(i)] } &amp;if &amp;w[i]&lt;=j \end{array}\right. $$
 对于情况$w[i]&gt;j$表示第i个物品的重量大于背包容量，所以此时不能够放入第i个物品进背包内，只能够放弃，因此这种情况下只能够考虑前i-1个物品，即：$B(i-1,j)$ 对于第二种情况，当前背包能够放入第i个物品。这时我们需要考虑两种情况：1.放入第i个物品；2.不放入第i个物品；因此我们需要在这两种情况中选出一个最大值；  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  public class pack { public static void main(String[] args) { int[] w={0,2,3,4,5};//各物品体积  int[] p={0,1,2,5,6};//各物品价值  int c=8;//背包总容量  int x=w.]]></description>
</item><item>
    <title>动态规划问题</title>
    <link>https://shilongshen.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/</link>
    <pubDate>Mon, 11 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[动态规划解题的4个步骤  定义子问题(重叠子问题) 写出子问题的递推关系 确定DP数组的计算顺序 空间优化（可选）  打家劫舍 采用一维数组的动态规划
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  // 问题转化为：给定长度为n的数组，如何取最大的和（在满足条件的情况下） class Solution { public int rob(int[] nums) { int len=nums.length; if(len==0) return 0; if(len==1) return nums[0]; int[] dp=new int[len]; dp[0]=nums[0]; dp[1]=Math.max(nums[0],nums[1]); for(int i=2;i&lt;len;i++){ dp[i]=Math.max(dp[i-1],dp[i-2]+nums[i]); } return dp[len-1]; } }   打家劫舍 II 采用两个一维数组的动态规划
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  class Solution { public int rob(int[] nums) { int len = nums.]]></description>
</item><item>
    <title>设计模式</title>
    <link>https://shilongshen.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 11 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[什么是设计模式   设计模式是软件设计中常见问题的典型解决方案。
  每个设计模式就像是一张蓝图，你可以对其进行定制来解决代码中的特定设计问题。
   设计模式与方法或库的使用方式不同， 你很难直接在自己的程序中套用某个设计模式。 模式并不是一段特定的代码， 而是解决特定问题的一般性概念。 你可以根据模式来实现符合自己程序实际所需的解决方案。
  模式是针对软件设计中常见问题的解 决方案工具箱， 它们定义了一种让你的团队能更高效沟通的通用语言。  简单工厂方法 定义一个工厂类，他可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  //定义一个接口 public interface Product { } //CreateProduct1,CreateProduct2,CreateProduct3都是接口的实现类 class CreateProduct1 implements Product{ } class CreateProduct2 implements Product{ } class CreateProduct3 implements Product{ }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  //定义简单工厂类 //可以通过参数（type）的选择返回不同的实例(CreateProduct1,CreateProduct2,CreateProduct3) public class SampleFactoryMode { public Product creatrProduct(int type){ if (type==1){ return new CreateProduct1(); } else if(type==2){ return new CreateProduct2(); } else { return new CreateProduct3(); } } }   1 2 3 4 5 6 7  //主方法通过直接调用简单工厂类，来得到不同的实例（通过不同的参数），而不需要知道实例中的具体实现 public class main { public static void main(String[] args) { SampleFactoryMode sampleFactoryMode=new SampleFactoryMode(); Product product=sampleFactoryMode.]]></description>
</item><item>
    <title>丑数</title>
    <link>https://shilongshen.github.io/%E4%B8%91%E6%95%B0/</link>
    <pubDate>Sat, 02 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E4%B8%91%E6%95%B0/</guid>
    <description><![CDATA[date: 2021-02-04T09:17:30+08:00
参考
可以采用动态规划的想法！
第n个丑数$x_n$，它必然为一下三种情况之一: $$ x_n= \left{ \begin{array}{rcl} x_a \times 2 \
x_b \times 3 \
x_c \times 5\
\end{array}\right. $$ 其中$x_a , x_b ,x_c $是未知数。
为了保证不会遗漏某个丑数，$x_n$必然等于： $$ x_n=min{x_a \times 2,x_b \times 3,x_c \times 5 } $$
 这里我们需要明确的是一个丑数乘上2或3或5还是一个丑数
 这里因为我们要在${x_a \times 2,x_b \times 3, x_c \times 5}$中挑选出最小的一个丑数，我们可以这样考虑，假设存在三个数组，分别用第一个丑数乘上2,3,5
1 2 3 4 5 6 7  nums2={1*2,2*2,3*2,4*2,5*2,6*2,8*2...} nums3={1*3,2*3,3*3,4*3,5*3,6*3,8*3...} nums5={1*5,2*5,3*5,4*5,5*5,6*5,8*5...} # 注意 7 不是丑数. # 2, 3, 5 这前 3 个丑数一定要乘以其它的丑数， 所得的结果才是新的丑数， 所以上例中没有出现 7*2, 7*3, 7*5   那么， 最终的丑数序列实际上就是这 3 个有序序列对的合并结果， 计算丑数序列也就是相当于 合并 3 个有序序列。 合并 3 个有序序列]]></description>
</item><item>
    <title>位运算的基本知识</title>
    <link>https://shilongshen.github.io/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</link>
    <pubDate>Wed, 30 Dec 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</guid>
    <description><![CDATA[参考
1  &gt;&gt;&gt; 运算符会用0填充高位，这与 &gt;&gt; 不同，其会用符号位填充高位。不存在 &lt;&lt;&lt; 运算符   例1
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  class Solution { // you need to treat n as an unsigned value  public int hammingWeight(int n) { /* * 采用位运算的方式 * 利用n与1进行与操作，即可判定n的最后一位是否为1，如果为1，res加1，否则不加 * 然后将n右移一位，知道n=0 * */ int res=0; while (n!=0){ res+=(n&amp;1); n=n&gt;&gt;&gt;1; } return res; } }   例2]]></description>
</item><item>
    <title>Linux相关</title>
    <link>https://shilongshen.github.io/linux%E7%9B%B8%E5%85%B3/</link>
    <pubDate>Mon, 28 Dec 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/linux%E7%9B%B8%E5%85%B3/</guid>
    <description><![CDATA[Linux中tty是什么 tty：终端设备的统称。
tty一词源于Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的东西，后来这东西被键盘与显示器取代，所以现在叫终端比较合适。终端是一种字符型设备，它有多种类型，通常使用tty来简称各种类型的终端设备。
tty1～6是文本型控制台，tty7是X Window图形显示管理器。
在本地机器上可以通过Ctrl+Alt+F1（F1-F7键）切换到对应的登录控制台。
 所谓的窗口环境就是：文字界面加上X窗口软件！文字界面一定是存在的，只是窗口界面软件看你要不要启动而已
 快捷键  Tab：命令和文件名补全； Ctrl+C：中断正在运行的程序； Ctrl+D：结束键盘输入（End Of File，EOF）  帮助 1. &ndash;help 指令的基本用法与选项介绍。
2. man man 是 manual 的缩写，将指令的具体信息显示出来。
当执行 man date 时，有 DATE(1) 出现，其中的数字代表指令的类型，常用的数字及其类型如下：
   代号 类型     1 用户在 shell 环境中可以操作的指令或者可执行文件   5 配置文件   8 系统管理员可以使用的管理指令    3. info info 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以跳转。
4. doc /usr/share/doc 存放着软件的一整套说明文件。
关机 1.]]></description>
</item></channel>
</rss>
