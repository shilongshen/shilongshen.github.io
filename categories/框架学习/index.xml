<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>框架学习 - Category - 我的个人博客</title>
        <link>https://shilongshen.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</link>
        <description>框架学习 - Category - 我的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 10 Mar 2021 09:54:48 &#43;0800</lastBuildDate><atom:link href="https://shilongshen.github.io/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/" rel="self" type="application/rss+xml" /><item>
    <title>Maven</title>
    <link>https://shilongshen.github.io/maven/</link>
    <pubDate>Wed, 10 Mar 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/maven/</guid>
    <description><![CDATA[Maven的核心概念 约定的目录结果 例如在com.maven中建立Hello项目
Hello |&mdash;src |&mdash;|&mdash;main |&mdash;|&mdash;|&mdash;java |&mdash;|&mdash;|&mdash;resources |&mdash;|&mdash;test |&mdash;|&mdash;|&mdash;java |&mdash;|&mdash;|&mdash;resources |&mdash;pom.xml
POM Project Object Model,项目对象模型
pom.xml对于Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行设置。
坐标 使用下面三个坐标在仓库中唯一定位一个maven工程
  group：公司或组织域名倒序+项目名
1  &lt;groupid&gt;com.maven&lt;/groupid&gt;    artifactid：模块名
1  &lt;artifactid&gt;Hello&lt;/artifactid&gt;    version：版本
1  &lt;version&gt;1.0.0&lt;/version&gt;    1 2 3 4 5 6 7  &lt;！--例--&gt;&lt;groupId&gt;junit&lt;/groupId&gt;&lt;artifactId&gt;junit&lt;/artifactId&gt;&lt;version&gt;4.12&lt;/version&gt;对应路径C:\Users\ssl\.m2\repository\junit\junit\4.12\junit-4.12.jar  依赖   maven解析依赖信息时会到本地仓库中查找被依赖的jar包
 对于我们自己开发的maven工程，使用**mvn install **命令安装后就可以进入仓库    依赖的范围]]></description>
</item><item>
    <title>SpringBoot</title>
    <link>https://shilongshen.github.io/springboot/</link>
    <pubDate>Wed, 10 Mar 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/springboot/</guid>
    <description><![CDATA[1、Spring Boot简介 什么是Spring Boot ：
 Spring Boot用于简化Spring应用开发的一个框架； 整个Spring技术栈的一个大整合； J2EE开发的一站式解决方案  优点：
 快速创建独立运行的Spring项目以及与主流框架集成 使用嵌入式的Servlet容器，应用无需打包WAR包 starters自动依赖与版本控制 大量的自动配置，简化开发，也可以修改默认值 无需配置XML，无代码生成，开箱即用 准生产环境的运行时应用监控 与云计算的天然集成  2、微服务 微服务是一种架构风格
一个应用应该是一组小型服务；可以通过HTTP的方式进行沟通；
每一个功能元素最终都是一个可独立替换和独立升级的软件单元；
基本介绍 HelloWorld   创建maven工程
  引入依赖
1 2 3 4 5 6 7 8 9 10 11 12  &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;version&gt;2.4.3&lt;/version&gt;&lt;/parent&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;/dependencies&gt;    编写主程序
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  package com.]]></description>
</item><item>
    <title>SpringMVC</title>
    <link>https://shilongshen.github.io/springmvc/</link>
    <pubDate>Wed, 10 Mar 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/springmvc/</guid>
    <description><![CDATA[什么是SpringMVC Spring MVC 是 Spring 提供给 Web 应用的框架设计
MVC 参考
首先用户的请求会到达 Servlet，然后根据请求调用相应的 Java Bean，并把所有的显示结果交给 JSP 去完成，这样的模式我们就称为 MVC 模式。
 M 代表 模型（Model） 模型是什么呢？ 模型就是数据，就是 dao,bean V 代表 视图（View） 视图是什么呢？ 就是网页, JSP，用来展示模型中的数据;主要负责接受Servlet传递的内容，调用JavaBean，将内容显示给用户 C 代表 控制器（controller) 控制器是什么？ 控制器的作用就是把不同的数据(Model)，显示在不同的视图(View)上，Servlet 扮演的就是这样的角色。主要负责所有用户的请求参数，判断请求参数是否合法，根据请求的类型调用JavaBean，将最终的处理结果交给显示层显示！    传统的模型层被拆分为了业务层(Service)和数据访问层（DAO,Data Access Object）。 在 Service 下可以通过 Spring 的声明式事务操作数据访问层，而在业务层上还允许我们访问 NoSQL ，这样就能够满足异军突起的 NoSQL 的使用了，它可以大大提高互联网系统的性能。
 特点： 结构松散，几乎可以在 Spring MVC 中使用各类视图 松耦合，各个模块分离 与 Spring 无缝集成   从图 1 可总结出 Spring MVC 的工作流程如下：]]></description>
</item><item>
    <title>JDBC</title>
    <link>https://shilongshen.github.io/jdbc/</link>
    <pubDate>Wed, 10 Feb 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/jdbc/</guid>
    <description><![CDATA[什么是JDBC JDBC API 允许用户访问任何形式的表格数据，尤其是存储在关系数据库中的数据。
JDBC(Java DataBase Connectivity, 简称JDBC)是Java中用于规范应用程序如何来访问数据库的应用程序接口(API),它提供了查询和更新数据库中数据的方法。
执行流程：
 连接数据源，如：数据库。 为数据库传递查询和更新指令。 处理数据库响应并返回的结果。  在Java程序和数据库之间的一个桥梁。
JDBC架构 两层 三层 JDBC 编程步骤 加载驱动程序：
1 2 3 4 5  Class.forName(driverClass)//加载MySql驱动Class.forName(&#34;com.mysql.jdbc.Driver&#34;)//加载Oracle驱动Class.forName(&#34;oracle.jdbc.driver.OracleDriver&#34;)  获得数据库连接：
1  DriverManager.getConnection(&#34;jdbc:mysql://127.0.0.1:3306/imooc&#34;, &#34;root&#34;, &#34;root&#34;);  创建Statement或PreparedStatement对象：
1 2  conn.createStatement();conn.prepareStatement(sql);  完整实例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  package com.]]></description>
</item><item>
    <title>Spring</title>
    <link>https://shilongshen.github.io/spring/</link>
    <pubDate>Wed, 10 Feb 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/spring/</guid>
    <description><![CDATA[1.Spring框架概述 是什么  是一个轻量级的开源的JavaEE框架 解决企业应用开发的复杂性 有两个核心部分：IOC和AOP  IOC:控制反转，把创建对象的过程交给Spring进行管理 AOP:面向切面，不修改源代码进行功能增强    特点  方便解耦，简化开发 AOP的支持方便程序的测试 方便和其他框架进行整合 降低Java EE API的开发难度 方便事务的操作  入门案例 1.下载地址： https://repo.spring.io/release/org/springframework/spring/ #spring-5.2.6.RELEASE-dist.zip 28-Apr-2020 08:22 82.25 MB
2.使用IDEA创建project
3.导入Spring的jar包 commons-logging-1.1.1.jar spring-beans-5.2.6.RELEASE.jar spring-context-5.2.6.RELEASE.jar spring-core-5.2.6.RELEASE.jar spring-expression-5.2.6.RELEASE.jar
4.创建普通类，在这个类创建普通方法
1 2 3 4 5 6  package com.bean1;public class User {public void add(){System.out.println(&#34;hello world!&#34;);}}  5.创建Spring配置文件，在配置文件配置创建的对象 (1)Spring配置文件使用XML格式
1 2 3 4 5 6 7 8  &lt;?]]></description>
</item><item>
    <title>SpringBoot运行时错误记录</title>
    <link>https://shilongshen.github.io/springboot%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Wed, 10 Feb 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/springboot%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[java.sql.SQLException: The server time zone value &lsquo;�й���׼ʱ��&rsquo; is unrecognized 参考
解决方法:
1  在URL上加上：?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8  Establishing SSL connection without server‘s identity verification is not recommende 参考
解决方法
1 2 3 4 5 6 7  在你连接数据库的url后面加上参数即可jdbc:mysql://localhost:3306/testdb?useSSL=false使用上述标红的URL,即可解决该警告,标红参数前面为你数据库连接URL,如果有多个参数记得用&amp;连接,例如jdbc:mysql://localhost:3306/testdb?characterEncoding=utf-8&amp;useSSL=false  template might not exist or might not be accessible by any of the configured Template Resolvers 解决方法：
在application.yaml中设置
1 2 3  spring:thymeleaf:prefix:classpath:/templates/  注意：thymeleaf 的classpath要多一个斜杠的，漏斜杠就会有问题]]></description>
</item></channel>
</rss>
