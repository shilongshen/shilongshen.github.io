<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java学习笔记 - Category - 我的个人博客</title>
        <link>https://shilongshen.github.io/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <description>Java学习笔记 - Category - 我的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 01 Feb 2021 09:54:48 &#43;0800</lastBuildDate><atom:link href="https://shilongshen.github.io/categories/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml" /><item>
    <title>Redis</title>
    <link>https://shilongshen.github.io/redis/</link>
    <pubDate>Mon, 01 Feb 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/redis/</guid>
    <description><![CDATA[NoSQL数据库的四大分类  KV键值对 文档类数据库 列存储数据库 图关系数据库  Redis简要介绍 Redis : REmote DIctionary Server（远程字典服务器），是一个高性能的（key/value）分布式内存数据库，基于内存运行，是当下最热门的NoSQL数据库之一，也被人们称为数据结构服务器。
Redis的三大特点  Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用 Redis不仅仅支持简单的key-value类型的数据，同时好提供list,set,zset,hash等数据结构的存储 Redis支持数据的备份，即master-slave模式的数据备份  Redis的使用场景   内存存储和持久化；Redis支持异步将内存中的数据存放写到磁盘上，同时不影响继续服务
  取最新N个数据的操作，如：可以将最新10条评论的ID放在Redis的list集合模拟类似HttpSession这种需要设定过期时间的功能
  发布、订阅消息系统
  定时器、计数器
可以对String进行自增自减运算，从而实现计数器功能。
redis这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量
  缓存
将热点数据放入内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率
  会话缓存
可以使用redis来统一存储多台应用服务器的回话信息
当应用服务器不再存储用户的会话信息，也就不在具有状态，一个用户可以请求任意一个应用服务器，从而实现高可用性以及可伸缩性。
  redis与memcached 两者都是非关系型内存键值数据库，主要有以下不同
数据类型
memcached仅支持字符串类型，而redis支持五种不同的数据类型，可以更灵活地解决问题
数据持久化
redis支持两种持久化策略：RDB快照和AOF日志，而memcached不支持持久化
分布式
memcached不支持分布式，只能通过再客户端使用一致性哈希来实现分布式存储
redis实现了分布式的支持
内存管理机制
 在redis中，并不是所有数据都一直存储在内存中，可以将一些很久没用的value交换到磁盘，而memcached的数据则一直在内存中。 memmcached将内存分割为特定长度的块来存储数据，以完全解决内存碎片的问题，但是这种方式会使得内存的利用率不高，例如块的大小为128bytes，只存储100bytes的数据，那么剩下的28bytes就浪费掉了  Redis相关知识  单进程 默认16个数据库，类似数组下标从零开始，初始默认使用0号 Select命令切换数据库 Dbsize查看当前数据库的key数量，keys *: 查看所有的key，keys k?：可以支持条件选择 flushall:清空所有的数据库（慎用） flushdb：清空当前库 同意密码管理，16个库都是同样的密码 redis索引都是从零开始 默认端口是6379  Redis的数据类型 Redis键（key）]]></description>
</item><item>
    <title>Linux相关</title>
    <link>https://shilongshen.github.io/linux%E7%9B%B8%E5%85%B3/</link>
    <pubDate>Mon, 28 Dec 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/linux%E7%9B%B8%E5%85%B3/</guid>
    <description><![CDATA[Linux中tty是什么 tty：终端设备的统称。
tty一词源于Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的东西，后来这东西被键盘与显示器取代，所以现在叫终端比较合适。终端是一种字符型设备，它有多种类型，通常使用tty来简称各种类型的终端设备。
tty1～6是文本型控制台，tty7是X Window图形显示管理器。
在本地机器上可以通过Ctrl+Alt+F1（F1-F7键）切换到对应的登录控制台。
 所谓的窗口环境就是：文字界面加上X窗口软件！文字界面一定是存在的，只是窗口界面软件看你要不要启动而已
 快捷键  Tab：命令和文件名补全； Ctrl+C：中断正在运行的程序； Ctrl+D：结束键盘输入（End Of File，EOF）  帮助 1. &ndash;help 指令的基本用法与选项介绍。
2. man man 是 manual 的缩写，将指令的具体信息显示出来。
当执行 man date 时，有 DATE(1) 出现，其中的数字代表指令的类型，常用的数字及其类型如下：
   代号 类型     1 用户在 shell 环境中可以操作的指令或者可执行文件   5 配置文件   8 系统管理员可以使用的管理指令    3. info info 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以跳转。
4. doc /usr/share/doc 存放着软件的一整套说明文件。
关机 1.]]></description>
</item><item>
    <title>Map的遍历方式</title>
    <link>https://shilongshen.github.io/map%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</link>
    <pubDate>Sun, 27 Dec 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/map%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  package MapTest; import java.util.Iterator; import java.util.Map; import java.]]></description>
</item><item>
    <title>常用函数</title>
    <link>https://shilongshen.github.io/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link>
    <pubDate>Sun, 27 Dec 2020 09:17:30 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[将字符串转换为字符： 1 2  String str = &#34;42&#34;; char[] chars = str.toCharArray();   去除字符串的空格： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  String trim //trim()方法移除字符串两侧(头尾)的空白字符(空格、tab键、换行符) String strip 1、trim()方法不足之处 trim()早在Java早期就存在，当时Unicode还没有完全发展到我们今天广泛使用的标准。 trim()方法移除字符串两侧的空白字符(空格、tab键、换行符) 支持Unicode的空白字符的判断应该使用isWhitespace(int)。 此外，开发人员无法专门删除缩进空白或专门删除尾随空白。 简单得说就是，trim()方法无法删除掉Unicode空白字符，但用Character.isWhitespace©方法可以判断出来。 2、strip()方法 JAVA11(JDK11)中的strip()方法，适用于字符首尾空白是Unicode空白字符的情况，通过一段代码来具体看一下， public static void main(String[] args) { String s = “\t abc \n”; System.]]></description>
</item><item>
    <title>计算机网络基础</title>
    <link>https://shilongshen.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Wed, 16 Dec 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[网络基础知识 TCP/IP是通信协议的统称
TCP/IP就是IP,TCP,HTTP等协议的集合。
简单的说，协议就是计算机与计算机之间通过网络实现通信时事先达成的一种“约定”。两台计算机之间必须能够支持相同的协议，并准守相同协议进行处理，这样才能实现相互通信。
分组交换协议 分组交换协议是指将大数据分割成一个个叫做包的较小单位进行传输的方法。
协议的分层 每个分层都接受由它下一层所提供的特定服务，并且负责为它的上一层提供特定的服务。上下层之间进行交互时所遵守的约定称为接口。同一层之间的交互叫做“协议”。
传输方式的分类 面向有连接型与面向无连接型 通过网络发送数据可以大致分为面向有连接型与面向无连接型。
 面向有连接型：字发送数据数据之前，需要在收发主机之间建立一条通信线路。就好比人们平常打电话 （如TCP协议） 面向无连接型：不要求建立和断开连接。发送端可以在任何时候自由发送数据。反之，接收端也永远不知道自己会在何时收到数据。因此在面向无连接型时，接收端常常需要确认是否接收到数据。就好比去邮局寄包裹 （如UDP协议，IP协议）  电路交换和分组交换 网络通信方式大致可以分为两种：电路交换和分组交换。
  电路交换历史久远，主要用于过去的电话网
 电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。    分组交换则是比较新的通信技术，TCP/IP则是采用了分组交换技术（重点介绍）。
 让连接到通信电路的计算机将所要发送的数据分为多个数据包，按照一定的顺序排列之后分别发送。这就是分组交换。有了分组交换，数据被细分之后，所有计算机就可以一齐收发数据。 每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换不需要占用传输线路。 在一个邮局通信系统中，邮局收到一份邮件之后，先存储下来，然后把相同目的地的邮件一起转发到下一个目的地，这个过程就是存储转发过程，分组交换也使用了存储转发过程。    地址 TCP/IP通信中使用MAC地址、IP地址、端口号等信息作为地址标识。甚至在应用层中，可以使用电子邮件地址作为网络通信的地址。
地址应该具有唯一性和层次性
MAC地址和IP地址在标识一个通信主体时虽然都具有唯一性，但是其中只有IP具有层次性。
TCP/IP的基础知识 参考
互联网进行通信时需要相应的网络协议，TCP/IP原本就是为使用互联网而开发制定的协议族。
因此互联网的协议就是TCP/IP，TCP/IP就是互联网的协议。
http是应用层协议，tcp是传输层协议，IP是网络层协议，不是同一层的协议，协议是一层层打包的。 像这样**［以太［IP［TCP［http［应用数据］］**
 OSI与TCP/IP的区别和联系 ISO制定了OSI模型，OSI参考模型中各个分层的作用：
ISO制定的OSI参考模型的过于庞大、复杂招致了许多批评。与此对照，由技术人员（IEFT）自己开发的TCP/IP协议栈获得了更为广泛的应用。如图所示，是TCP/IP参考模型和OSI参考模型的对比示意图。
TCP/IP参考模型分为四个层次：应用层、传输层、网络互连层和主机到网络层。
在TCP/IP参考模型中，去掉了OSI参考模型中的会话层和表示层（这两层的功能被合并到应用层实现）。同时将OSI参考模型中的数据链路层和物理层合并为主机到网络接口层。
网络7层协议，4层，5层？ 7层指OSI模型，包括物理层、数据链路层、网络层、传输层、会话层、表示层、应用层
4层指TCP/IP，包括网络接口层、网络层、传输层、应用层
5层只是OSI和TCP/IP的综合，是业界产生出来的非官方协议模型，但是很多具体的应用。实际应用还是TCP/IP的四层结构。为了方便可以把下两层称为网络接口层。五层体系结构包括：物理层、数据链路层、网络层、传输层、应用层、。
下面将针对“5层”进行介绍
TCP/IP分层模型与通信示例 每个分层中都会对所发送的数据附加一个首部，在这个首部中包含了必要的信息
网络中传输的数据包由两部分组成：一部分是协议要用到的首部，另一部分是上层传过来的数据。
在数据包的首部明确表明了协议应该如何读取数据。
TCP/IP各层对邮件的收发处理：
每个包首部至少都会有两个信息：一个是发送端和接收端地址（以太网会用MAC地址，IP会用IP地址，TCP会用端口号，即使是应用程序，也会用电子邮件这样的信息作为一种地址标识）；另一个是上层协议的协议类型（一个标识位，用来标识上一层的协议信息）。
什么是端口
分层中的包信息：
1.物理层（硬件） bit,byte,帧的区别和联系 1byte=8bit
在网络中，网络设备将“bit”组成一个个的byte，然后这些字节“封装”成帧，在网络上传输。为什么要把数据“封装”成帧呢？因为用户数据一般都比较大，有的可以达到MB字节，一下子发送出去十分困难，于是就需要把数据分成许多小份，再按照一定的次序发送出去。 以太网的帧值总是在一定范围内浮动，最大的帧值是1518字节，最小的帧值是64字节。在实际应用中，帧的大小是由设备的MTU（最大传输单位）即设备每次能够传输的最大字节数自动来确定的。]]></description>
</item><item>
    <title>Linux基础</title>
    <link>https://shilongshen.github.io/linux%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Mon, 14 Dec 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/linux%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[Linux中的命令行界面称为shell （图形界面称为GUI）。
bash shell（bash）是大多数Linux系统的默认shell，还用很多其他的shell ,例如ksh和csh。
 文本模式登录后所取得的程序被称为壳（shell），这是因为这只程序负责最外面跟使用者（我们）打交道，所以被戏称为“壳”
在Linux中的shell为bash
 shell也只是一个普通的用户程序。它仅仅需要从键盘读取数据、向显示器输出数据和运行其他程序的能力。
可以将一系列shell命令放到一个文件中，然后将此文件作为shell的输入来运行。包含shell命令的文件称为shell脚本。
Linux应用程序 Linux的命令行用户界面（shell）中包含大量的标准应用程序。这些程序大致可以分为以下6类：
 文件和目录操作命令 过滤器 程序设计工具，如编辑器和编译器 文档处理 系统管理 其他   常用指令：
cal : 日历查看
date：日期查看
shift+pageup /shift+pageup:向上翻页/向上翻页
内核结构 运行在硬件之上的为操作系统，其作用为控制硬件并且为其他程序提供系统调用接口。这些系统调用允许用户创立并管理进程、文件以及其他资源。
Linux具有三种不同的接口：真正的系统调用接口，库函数接口，由标准应用程序构成的接口。
内核位于硬件之上，负责实现I/O设备和存储管理单元的交互，并控制CPU对前苏诉设备的访问。
 最底层：最底层包含中断处理程序，它们是与设备交互的主要方式，以及底层的分派机制 中间层：中间层为内核的三个主要部件，I/O部件，内存管理部件，进程管理部件。  I/O部件： 内存管理部件：任务包括维护虚拟内存到物理内存的映射，维护最近被访问页面的缓存以及实现一个好的页面置换算法，并根据需要把需要的数据和代码页读入内存中。 进程管理部件：主要任务是进程的创建和终止   最顶层：最顶层为到内核的系统调用接口。所有系统调用都来自这里，其触发一个陷入，并将系统从用户态转换到受保护的内核态，继而将控制权交给上诉的内核部件之一。  Linux中的进程   在大多数单用户的工作站中，即使用户已经退出登录了，仍然会有很多后台进程，称为守护进程。计划任务是一种典型的守护进程。它每个几分钟运行一次来检查是否有工作需要它完成。
  在Linux中，系统调用fork将会创建一个与原始进程完全一样的进程副本。调用fork函数的进程称为父进程，新的进程称为子进程。
  进程以其PID来命名
  Linux中，进程间可以通过消息传递的方式进行通信。有两种方式：
  管道：一个进程子啊管道中写入字节流，另一个进程从这个管道中读取字节流。管道是同步的，因为当一个进程试图从一个管道中读取数据，这个进程就会被挂起直到管道中有数据为止。
shell中的管线就是用管道技术实现的，例如sort &lt;file | head,有两个进程sort,head
  软中断：一个进程可以给另一个进程发送信号，进程可以告诉操作系统当信号到来时他们希望发生什么事件。相关的选择有忽略这个信号、抓取这个信号或被这个信号杀死。
    Linux中进程与线程的实现  每一个进程都有运行用户程序的用户模式。 但是当它的某个线程调用系统调用之后，进程就会陷入内核模式并且运行在内核上下文中，他将使用不同的内存映射并且拥有对所有机器资源的访问权。它还是同一个进程，但是现在拥有更高的权限，同时拥有自己的内核堆栈以及内核程序计数器。  ]]></description>
</item><item>
    <title>ArrayList扩容机制</title>
    <link>https://shilongshen.github.io/arraylist%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Fri, 27 Nov 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/arraylist%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[说明：基于JDK15进行分析
JDK15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  //默认容量大小为10private static final int DEFAULT_CAPACITY = 10;//空数组 private static final Object[] EMPTY_ELEMENTDATA = {};//空数组实例的大小private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};//将要被存储的ArrayList元素的数据缓冲//The capacity of the ArrayList is the length of this array buffer，即ArrayList的容量就是这个缓冲的长度//Any empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA will be expanded to DEFAULT_CAPACITY when the first element is added.]]></description>
</item><item>
    <title>并发总结</title>
    <link>https://shilongshen.github.io/%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 27 Nov 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[并发和并行的区别 参考
 并发是两个队列交替使用一台咖啡机，并行是两个队列同时使用两台咖啡机 并发和并行都可以是很多个线程，就看这些线程能不能同时被（多个）cpu执行，如果可以就说明是并行，而并发是多个线程被（一个）cpu 轮流切换着执行。  线程和进程的区别 简单的理解：
  进程是系统中的一个应用，进程不会相互影响。进程是程序运行的基本单位，系统运行一个程序就是一个进程从创建到灭亡的过程
  一个进程中可以包含多个线程，一个线程开辟一个栈空间，假设有10个线程，就会开辟10个栈空间。但是不同线程之间是共享方法区和堆的。
 栈是线程私用的，生命周期和线程相同，栈描述的是Java方法执行的线程内存模型：每个方法执行的时候都会同步创建一个栈帧用于存储局部变量表/操作数栈，动态连接。方法出口等信息。 堆是所有线程共享的区域。这在JVM启动时创建，此内存唯一的目的就是存放对象实例 方法区是所有线程共享的区域，用于存储已被JVM加载的类型信息，常量，静态常量，即时编译后的代码缓存片段。    1 2 3 4 5 6 7 8 9 10 11 12 13 14  这里要引入一个概念：除了CPU以外所有的执行环境，主要是寄存器的一些内容，就构成了进程的上下文环境。进程的上下文是进程执行的环境。当这个程序执行完了，或者分配给他的CPU时间片用完了，那它就要被切换出去，等待下一次CPU的临幸。在被切换出去做的主要工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存 --- 进程的颗粒度太大，每次的执行都要进行进程上下文的切换。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。那么这里具体的执行就可能变成： 程序A得到CPU -&gt; CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。 这里a，b，c的执行是共享了A进程的上下文，CPU在执行的时候仅仅切换线程的上下文，而没有进行进程上下文切换的。进程的上下文切换的时间开销是远远大于线程上下文时间的开销。这样就让CPU的有效使用率得到提高。这里的a，b，c就是线程，也就是说线程是共享了进程的上下文环境的更为细小的CPU时间段。线程主要共享的是进程的地址空间。 作者：zhonyong 链接：https://www.zhihu.com/question/25532384/answer/81152571 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。   小结：进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。参考
进程的实现：
为了实现进程模型，操作系统维护这一张表格，即进程表（PCB）。每个进程占用一个进程表项（或称为进程控制块）。该表项中包括了进程的状态的重要信息，包括程序计数器，堆栈指针，内存分配状况，所打开文件的状态，账号和调度信息，以及其他在进程由运行态转换到就绪态或阻塞态必须保存的信息，从而保证该进程随后能再次启动，就像从未被中断一样
注意：进程表是在操作系统中的（在内核态中）
再一次明确：进程切换的效率是比较低的
在切换进程时，首先用户态必须切换到内核态；然后保存当前进程的状态 ，包括在进程表中存储寄存器值以便以后重新加载。在许多系统中，内存映像也必须保存；接着，通过运行调度算法选定一个新进程；之后，应该将新进程的内存映像重新载入MMU（内存管理单元）中；最后，新进程开始运行。除此之外，进程切换还要使得整个内存高速缓存失效，强迫缓存从内存中动态重新载入两次（进入内核一次，出内核一次）。
进程是由内核管理和调度的，所以进程的切换只能发生在内核态。
所以，进程的上下文切换不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。
通常，会把交换的信息保存在进程的 PCB，当要运行另外一个进程的时候，我们需要从这个进程的 PCB 取出上下文，然后恢复到 CPU 中，这使得这个进程可以继续执行，如下图所示：
为什么需要线程：
 主要原因：在一个进程中可能会同时发生多个活动。其中某一些活动随着时间的推移会被阻塞。通过将进程分解为多个线程，程序设计模式会变得简单 线程比进程更加的轻量化，所以线程比进程更容易创建和销毁。  进程和线程的区别：]]></description>
</item><item>
    <title>操作系统基础</title>
    <link>https://shilongshen.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Fri, 27 Nov 2020 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[什么是操作系统 操作系统所处的位置：
底层是硬件，包括芯片，电路板，硬盘，键盘等
硬件的上层是软件，软件又分为用户态和内核态
其中操作系统运行在内核态中，处于软件的最基础部分，操作系统具有对所有硬件的完全访问权，可以执行机器能够运行的任何指令。
用户态的最低层次称为用户接口程序（用户与之交互的程序，基于文本的称为shell，基于图形界面的称为GUI），用户接口程序允许用户运行其他程序，例如web应用,电子邮件，音乐播放器。
 文本模式登录后所取得的程序被称为壳（shell），这是因为这只程序负责最外面跟使用者（我们）打交道，所以被戏称为“壳”
在Linux中的shell为bash
  操作系统本质上是一个运行在计算机的软件，用于管理计算机硬件和软件资源（操作系统是一个运行在内核态的软件） 操作系统屏蔽了硬件的复杂性 操作系统运行与裸机之上，为其他软件提供基础的运行环境  操作系统具有两种功能：
 向应用程序提供抽象;例如将硬盘抽象为文件，使用该抽象，程序可以创建，读写文件，而不用直接和硬件打交道。 管理计算机资源;在相互竞争的程序间有序的控制对处理器、存储器以及其他I/O接口的分配。  什么是系统调用 如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。
线程中发生函数调用时, 就会在线程栈中分配函数调用栈, 而虚拟内存分配, 文件操作, 网络读写等很多功能都是由操作系统来实现的, 再向用户程序暴露接口, 所以线程免不了要调用操作系统提供的系统服务, 即系统调用.

Linux 的系统调用主要有以下这些：
   Task Commands     进程控制 fork(); exit(); wait();   进程通信 pipe(); shmget(); mmap();   文件操作 open(); read(); write();   设备操作 ioctl(); read(); write();   信息维护 getpid(); alarm(); sleep();   安全 chmod(); umask(); chown();    例：]]></description>
</item><item>
    <title>ArrayList与数组之间的相互转换</title>
    <link>https://shilongshen.github.io/arraylist%E4%B8%8E%E6%95%B0%E7%BB%84%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</link>
    <pubDate>Wed, 25 Nov 2020 13:26:17 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/arraylist%E4%B8%8E%E6%95%B0%E7%BB%84%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</guid>
    <description><![CDATA[将ArrayList转换为数组 方法1：利用循环语句将ArrayList中的元素添加到数组中 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public class ArrayListTest { public static void main(String[] args) { List&lt;Integer&gt; list =new ArrayList(); list.add(1); list.add(2); list.add(3); list.add(4); int[] b=new int[list.size()]; for (int i=0;i&lt;list.size();i++){ b[i]= list.get(i); } for (int s:b){ System.out.println(s); } } }   方法2：使用ArrayList中的toArray方法，将Arraylist转换为数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  public class ArrayListTest { public static void main(String[] args) { List&lt;Integer&gt; list =new ArrayList(); list.]]></description>
</item></channel>
</rss>
