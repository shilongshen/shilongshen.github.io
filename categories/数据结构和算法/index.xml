<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>数据结构和算法 - Category - 我的个人博客</title>
        <link>https://shilongshen.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</link>
        <description>数据结构和算法 - Category - 我的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 28 May 2021 09:54:48 &#43;0800</lastBuildDate><atom:link href="https://shilongshen.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml" /><item>
    <title>剪绳子</title>
    <link>https://shilongshen.github.io/%E5%89%AA%E7%BB%B3%E5%AD%90/</link>
    <pubDate>Fri, 28 May 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E5%89%AA%E7%BB%B3%E5%AD%90/</guid>
    <description><![CDATA[算术几何均值不等式： $$ \frac{n_1+n_2+&hellip;+n_a}{a}\geq a\sqrt{n_1n_2&hellip;n_a} $$ 当且仅当$n_1=n_2=&hellip;=n_a$时等号成立,$\sqrt{n_1n_2&hellip;n_a}$取最大值。
根据上述不等式可以得知，当每段绳子的相等时，乘积最大。设绳子的总长度为n，每段绳子的长度为x，共有a段绳子，即$ax=n$，则最大的乘积为$x^a$,即 $$ x^a=x^{\frac{n}{x}}=(x^{\frac{1}{x}})^{n} $$ 设$y=x^\frac{1}{x}$，问题转换为求$y$的最大值，对$y$进行分析 $$ \begin{align} y&amp;=x^\frac{1}{x}\
\ln y&amp;=\frac{1}{x} \ln x \end{align} $$ 两端求导 $$ \begin{align} \frac{1}{y}\dot{y}&amp;=\frac{-1}{x^2} \ln x+\frac{1}{x^2} \end{align} $$ 整理得 $$ \begin{align} \dot{y}&amp;=y(\frac{-1}{x^2} \ln x+\frac{1}{x^2})\
\dot{y}&amp;=x^\frac{1}{x}(\frac{1- \ln x}{x^2}) \end{align} $$ 令$\dot{y}=0$得$x=e\approx2.7$，又有当$x&gt;e$时，$\dot{y}$小于0，当$x&lt;e$时，$\dot{y}$大于0，所以$x=e$为最大值点。但是绳子的长度$x$必须为整数，比较 $$ y(3)=3^{\frac{1}{3}}\approx1.44 y(3)=2^{\frac{1}{2}}\approx1.41 $$ 所以当$x=3$时，可以取得乘积得最大值。
切分规则：
当将绳子尽可能多以长度为3进行切分时，乘积最大，当存在余数得时候，存在3种情况
 余数为0，最大乘积为$3^a$ 余数为1，因为$2\times 2 &gt;1\times 3$,所以最大乘积为$3^{a-1}\times 4$ 当余数为2时，最大乘积为$3^a*2$  ]]></description>
</item><item>
    <title>B树、B&#43;树和红黑树</title>
    <link>https://shilongshen.github.io/b%E6%A0%91b-%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
    <pubDate>Fri, 23 Apr 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/b%E6%A0%91b-%E6%A0%91%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
    <description><![CDATA[B树 2-3树和2-3-4树 多路查找树，其每个节点的孩子数可以多于两个，且每一个结点处可以存储多个元素，所有的元素之间存在某种特定的排序关系。
 首先聊一聊2-3树：    每个节点具有两个孩子（2结点）或 三个孩子（3结点）
  2结点具有一个元素和两个孩子（或没有孩子），左子树元素小于该元素，右子树元素大于该元素。这个2节点要么没有孩子，要有就有两个，不能只有一个孩子。
  3结点具有两个元素和三个孩子（或没有孩子），左子树元素小于较小元素，右子树元素大于较大元素，中子树包含介于两元素之间的元素。这个3节点要么没有孩子，要有就有3个。
  2-3树中的所有叶子都在一个层次上。
  同理，2-3-4树是2-3树的拓展，包括了4结点的使用。一个4结点包含了小中大三个元素和四个孩子（或没有孩子）
而2-3树和2-3-4树都是B树的特例
2-3树的插入和删除 再聊一聊2-3树的插入和删除操作  插入操作：与二叉排序树相同，插入操作一定是发生在叶子结点的。
  对于空树，直接插入一个2结点
  对于2结点的插入：直接将2结点转换为3结点即可
  对于3结点的插入一个新元素：因为3结点本身已经是2-3树结点的最大容量，因此需要将其拆分，将树中两元素或插入元素的三者中选择其一向上移动一层。
例如插入元素5，需要将6向上移动一层
  删除操作：
  所删除元素位于一个3结点的叶子节点上，直接将该节点删除
  所删除的元素位于一个2结点的叶子节点上，分为4种情况
   此节点的父结点也是2结点，且拥有一个3结点的右孩子  例如删除结点1，只需要进行左旋，让6成为父节点，4成为6的左孩子，7为6的右孩子
 此节点的父结点也是2结点，且拥有一个2结点的孩子    此节点的父结点是3结点
  当前树是一颗满二叉树
  所删除元素位于非叶子结点。此时通常是将树按中序遍历后得到此元素的前驱或后继元素，考虑让他们来补位即可   描述一颗B树时需要指定它的阶数
每一个结点都可以存储多个数据，我们可以进一步的将其细分为
B+树 B+树的优点   单一节点存储更多的元素，使得查询的IO次数更少。]]></description>
</item><item>
    <title>二分查找</title>
    <link>https://shilongshen.github.io/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
    <pubDate>Fri, 23 Apr 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
    <description><![CDATA[二分查找思路1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public int Search(int[] nums,int target){int left=0;int right=nums.length-1;while(left&lt;=right){int mid=left+(right-left)/2;if(nums[mid]==target){return nums[mid];}else if(nums[mid]&gt;target){right=mid-1；}else{left=mid+1;}}return -1;}  二分查找的思路2  排除法：考虑中间元素nums[mid] 在什么情况下不是目标元素 思路：将待搜索区间分为2个部分，一部分一定不存在目标元素，另一部分可能存在目标元素  写二分查找的一般步骤：
 将循环条件设置为while(left&lt;right) 写if和else语句的时候，思考nums[i]满足什么性质时，nums[mid]不是目标元素，接着判断mid的左边有没有可能存在目标元素，mid的右边有没有可能存在目标元素。 根据“边界收缩行为”修改中间数的行为  int mid = left +(right - left)/2 “/” 是整数除法，默认的取整行为是向下取整，这会带来一个问题：int mid = left +(right - left)/2 永远取不到右边界right，对应的是mid被分到了左边区间。在面对left=mid和right=mid-1这种边界收缩时，就有可能产生死循环。   退出循环后，看是否需要对nums[left]是否是目标元素再做一次检查。  参考 链接]]></description>
</item><item>
    <title>算法复杂度分析</title>
    <link>https://shilongshen.github.io/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</link>
    <pubDate>Mon, 22 Mar 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[执行时间: 时间复杂度
内存消耗：空间复杂度
一般更关注于时间复杂度，(所以常用空间换时间)
时间复杂度 大$O$记号
$O(g(N))$：代表了一个复杂的表达式，是关于输入规模$N$的函数的上界
$g(N)$：关于输入规模$N$的简单表达式，$N$可以理解为输入数据的个数
 随着输入规模的增加，程序的运行时间将以什么样的速度增加。
 时间复杂度的计算规则 如果一个算法执行的操作数于输入数据的规模$N$的表达式为多项式： $$ aN^2+bN+c $$
 时间复杂度忽略加法常数项 只保留最高次幂项 并且最高次幂项的乘法系数视为1  所以上式可看为 $$ N^2 $$
所以时间复杂度就为$O(N^2)$
注意：时间复杂度只有当输入规模特别大时才有意义
时间复杂度的数学表达式 $O(g(n))={f(n):存在正常量c和n_0，使得对所有n\geq n_0,有0 \leq f(n) \leq cg(n)}$
$O(g(n))$是$f(n)$的上界，等价于:$\lim\limits_{n \rightarrow \infty }\frac{f(n)}{g(n)} &lt;= c$
空间复杂度 空间复杂度表达了在处理过程中，使用的额外空间，也是用大$O$记号。
参考 链接]]></description>
</item><item>
    <title>算法题记录</title>
    <link>https://shilongshen.github.io/%E7%AE%97%E6%B3%95%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Mon, 22 Mar 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E7%AE%97%E6%B3%95%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[查找 有序数组的二分查找 链接
包含重复元素有序数组的二分查找 链接
猜数字大小 链接
在排序数组中查找元素的第一个和最后一个位置 链接
搜索插入位置 链接
搜索旋转排序数组 链接
搜索旋转排序数组2 链接
寻找排序数组中的最小值 链接
x的平方根 链接
排序 基础排序算法 链接
合并两个有序数组 链接
删除数组中的重复元素 链接
移除元素 链接
移动零 链接
数组中出现次数大于一半的数字 链接
合并排序数组 链接
寻找第K大的元素 链接
最小的K个数（topK问题） 链接
树 重建二叉树 链接
最大二叉树 链接
合并二叉树 链接
二叉搜索树中的搜索 链接
验证二叉搜索树 链接
二叉搜索树的绝对值之差 链接
二叉搜索树的众数 链接
二叉树的最近公共祖先 链接
二叉搜索树的最近公共祖先 [链接](二叉搜索树的最近公共祖先 - 二叉搜索树的最近公共祖先 - 力扣（LeetCode） (leetcode-cn.com))
二叉搜索树的插入操作 链接
二叉搜索树的删除操作 链接
二叉搜索树的修剪 链接
将二叉树转换为累加树 链接]]></description>
</item><item>
    <title>背包问题</title>
    <link>https://shilongshen.github.io/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
    <pubDate>Mon, 22 Mar 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[0-1背包 背包问题的关键因素：
 背包的重量 物品的重量以及物品的价值 如果物品不可以重复放入则是0-1背包问题 &ndash;&gt;背包进行倒序遍历 每个物品只有两种状态：放入背包/不放入背包 &ndash;&gt;max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i])  使用二维数组进行解决
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  package Dynamic;import java.util.Arrays;public class bean12 {public static void main(String[] args) {int[] weight={1,3,4};int[] value={15,20,30};int bagweight=4;int[][] dp=new int[weight.]]></description>
</item><item>
    <title>回溯算法</title>
    <link>https://shilongshen.github.io/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</link>
    <pubDate>Thu, 04 Feb 2021 09:17:30 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[参考
 「回溯算法」与「深度优先遍历」都有「不撞南墙不回头」的意思。我个人的理解是：「回溯算法」强调了「深度优先遍历」思想的用途，用一个 不断变化 的变量，在尝试各种可能的过程中，搜索需要的结果。强调了 回退 操作对于搜索的合理性。
 递归之后需要做和递归之前相同的逆向操作   问题1 给定一个 没有重复 数字的序列，返回其所有可能的全排列。
我们尝试在纸上写 333 个数字、444 个数字、555 个数字的全排列，相信不难找到这样的方法。以数组 [1, 2, 3] 的全排列为例。
先写以 111 开头的全排列，它们是：[1, 2, 3], [1, 3, 2]，即 1 + [2, 3] 的全排列（注意：递归结构体现在这里）； 再写以 222 开头的全排列，它们是：[2, 1, 3], [2, 3, 1]，即 2 + [1, 3] 的全排列； 最后写以 333 开头的全排列，它们是：[3, 1, 2], [3, 2, 1]，即 3 + [1, 2] 的全排列。  总结搜索的方法：按顺序枚举每一位可能出现的情况，已经选择的数字在 当前 要选择的数字中不能出现。按照这种策略搜索就能够做到 不重不漏。这样的思路，可以用一个树形结构表示。
  每一个结点表示了求解全排列问题的不同的阶段，这些阶段通过变量的「不同的值」体现，这些变量的不同的值，称之为「状态」； 使用深度优先遍历有「回头」的过程，在「回头」以后， 状态变量需要设置成为和先前一样 ，因此在回到上一层结点的过程中，需要撤销上一次的选择，这个操作称之为「状态重置」；]]></description>
</item><item>
    <title>链表的复制</title>
    <link>https://shilongshen.github.io/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</link>
    <pubDate>Thu, 28 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</guid>
    <description><![CDATA[在这里，复制的意思是指 深拷贝（Deep Copy），类似我们常用的“复制粘贴”，事实上，与此对应的还有 浅拷贝，它们的区别是：
浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象  1.普通单向链表的定义
1 2 3 4 5 6 7 8 9 10  // Definition for a Node. class Node { int val; Node next; public Node(int val) { this.val = val; this.next = null; } }   给定链表的头结点head，复制链表需要遍历链表，每一轮建立新节点+构建前驱结点pre和当前结点node的引用指向即可
1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution{ public Node copy(Node head){ Node cur=head; Node dum=new Node(0);//随意初始化一个结点  Node pre=dum; while(cur!]]></description>
</item><item>
    <title>广度优先问题问题</title>
    <link>https://shilongshen.github.io/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</link>
    <pubDate>Mon, 25 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[机器人的运动范围 ### 解题思路
采用广度优先搜索的方式
广度优先通常采用队列的方式，以一种平铺的方式进行计算
移动方向：我们可以只定义向下和向右进行移动
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  class Solution { public int movingCount(int m, int n, int k) { Deque&lt;int[]&gt; deque = new ArrayDeque&lt;&gt;();//定义一个队列，由于添加删除状态  int[] dx = {1, 0};//右移一位  int[] dy = {0, 1};//下移一位  boolean[][] vis = new boolean[m][n];//定义一个boolean二维数组用于确定该坐标是否被添加  vis[0][0] = true;//坐标[0][0]一定会被使用的，因此将其初始化为true  deque.]]></description>
</item><item>
    <title>01背包问题</title>
    <link>https://shilongshen.github.io/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
    <pubDate>Mon, 11 Jan 2021 09:54:48 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://shilongshen.github.io/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[n件物品，它们装入背包所占的容量分别为w1、w2……wn;它们所拥有的价值分别为p1、p2 ……p	n； 有一个总容量为C的背包；
在装满背包的情况下，如何使得包内的总价值最大？
该问题的特点是：每个物品仅有一个，可以选择放或者不放，也就是说每个物品只能使用一次。
首先我们定义一个变量$B(i,j)$表示当背包容量为j，前i个物品（第1个到第i个）的情况下包内的最大价值。
即有i个物品，背包的容量为j，此时的包内的最大价值。
我们对每一件物品进行编号，可以列出以下表格：
行表示背包的容量，列表时背包的编号；为了便于操作，我们将0也加入了表格之中。
现在来分析$B(i,j)$的情况，首先明确一点，为了求出$B(i,j)$，我们可以利用之前的状态。 $$ B(i,j)=\left{ \begin{array}{lcl} B(i-1,j) &amp;if &amp;w[i]&gt;j \
max{ [B(i-1,j)]; [B(i-1,j-w(i))+p(i)] } &amp;if &amp;w[i]&lt;=j \end{array}\right. $$
 对于情况$w[i]&gt;j$表示第i个物品的重量大于背包容量，所以此时不能够放入第i个物品进背包内，只能够放弃，因此这种情况下只能够考虑前i-1个物品，即：$B(i-1,j)$ 对于第二种情况，当前背包能够放入第i个物品。这时我们需要考虑两种情况：1.放入第i个物品；2.不放入第i个物品；因此我们需要在这两种情况中选出一个最大值；  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  public class pack { public static void main(String[] args) { int[] w={0,2,3,4,5};//各物品体积  int[] p={0,1,2,5,6};//各物品价值  int c=8;//背包总容量  int x=w.]]></description>
</item></channel>
</rss>
